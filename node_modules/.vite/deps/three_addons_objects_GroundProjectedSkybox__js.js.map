{
  "version": 3,
  "sources": ["../../three/examples/jsm/objects/GroundProjectedSkybox.js"],
  "sourcesContent": ["import { Mesh, IcosahedronGeometry, ShaderMaterial, DoubleSide } from 'three';\r\n\r\n/**\r\n * Ground projected env map adapted from @react-three/drei.\r\n * https://github.com/pmndrs/drei/blob/master/src/core/Environment.tsx\r\n */\r\nclass GroundProjectedSkybox extends Mesh {\r\n\r\n\tconstructor( texture, options = {} ) {\r\n\r\n\t\tconst isCubeMap = texture.isCubeTexture;\r\n\r\n\t\tconst defines = [\r\n\t\t\tisCubeMap ? '#define ENVMAP_TYPE_CUBE' : ''\r\n\t\t];\r\n\r\n\t\tconst vertexShader = /* glsl */ `\r\n\t\t\tvarying vec3 vWorldPosition;\r\n\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tvec4 worldPosition = ( modelMatrix * vec4( position, 1.0 ) );\r\n\t\t\t\tvWorldPosition = worldPosition.xyz;\r\n\r\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t\t}\r\n\t\t\t`;\r\n\t\tconst fragmentShader = defines.join( '\\n' ) + /* glsl */ `\r\n\r\n\t\t\t\tvarying vec3 vWorldPosition;\r\n\r\n\t\t\t\tuniform float radius;\r\n\t\t\t\tuniform float height;\r\n\t\t\t\tuniform float angle;\r\n\r\n\t\t\t\t#ifdef ENVMAP_TYPE_CUBE\r\n\r\n\t\t\t\t\tuniform samplerCube map;\r\n\r\n\t\t\t\t#else\r\n\r\n\t\t\t\t\tuniform sampler2D map;\r\n\r\n\t\t\t\t#endif\r\n\r\n\t\t\t\t// From: https://www.shadertoy.com/view/4tsBD7\r\n\t\t\t\tfloat diskIntersectWithBackFaceCulling( vec3 ro, vec3 rd, vec3 c, vec3 n, float r ) \r\n\t\t\t\t{\r\n\r\n\t\t\t\t\tfloat d = dot ( rd, n );\r\n\r\n\t\t\t\t\tif( d > 0.0 ) { return 1e6; }\r\n\r\n\t\t\t\t\tvec3 o = ro - c;\r\n\t\t\t\t\tfloat t = - dot( n, o ) / d;\r\n\t\t\t\t\tvec3 q = o + rd * t;\r\n\r\n\t\t\t\t\treturn ( dot( q, q ) < r * r ) ? t : 1e6;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// From: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm\r\n\t\t\t\tfloat sphereIntersect( vec3 ro, vec3 rd, vec3 ce, float ra ) {\r\n\r\n\t\t\t\t\tvec3 oc = ro - ce;\r\n\t\t\t\t\tfloat b = dot( oc, rd );\r\n\t\t\t\t\tfloat c = dot( oc, oc ) - ra * ra;\r\n\t\t\t\t\tfloat h = b * b - c;\r\n\r\n\t\t\t\t\tif( h < 0.0 ) { return -1.0; }\r\n\r\n\t\t\t\t\th = sqrt( h );\r\n\r\n\t\t\t\t\treturn - b + h;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvec3 project() {\r\n\r\n\t\t\t\t\tvec3 p = normalize( vWorldPosition );\r\n\t\t\t\t\tvec3 camPos = cameraPosition;\r\n\t\t\t\t\tcamPos.y -= height;\r\n\r\n\t\t\t\t\tfloat intersection = sphereIntersect( camPos, p, vec3( 0.0 ), radius );\r\n\t\t\t\t\tif( intersection > 0.0 ) {\r\n\r\n\t\t\t\t\t\tvec3 h = vec3( 0.0, - height, 0.0 );\r\n\t\t\t\t\t\tfloat intersection2 = diskIntersectWithBackFaceCulling( camPos, p, h, vec3( 0.0, 1.0, 0.0 ), radius );\r\n\t\t\t\t\t\tp = ( camPos + min( intersection, intersection2 ) * p ) / radius;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tp = vec3( 0.0, 1.0, 0.0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn p;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t#include <common>\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvec3 projectedWorldPosition = project();\r\n\r\n\t\t\t\t\t#ifdef ENVMAP_TYPE_CUBE\r\n\r\n\t\t\t\t\t\tvec3 outcolor = textureCube( map, projectedWorldPosition ).rgb;\r\n\r\n\t\t\t\t\t#else\r\n\r\n\t\t\t\t\t\tvec3 direction = normalize( projectedWorldPosition );\r\n\t\t\t\t\t\tvec2 uv = equirectUv( direction );\r\n\t\t\t\t\t\tvec3 outcolor = texture2D( map, uv ).rgb;\r\n\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\tgl_FragColor = vec4( outcolor, 1.0 );\r\n\r\n\t\t\t\t\t#include <tonemapping_fragment>\r\n\t\t\t\t\t#include <colorspace_fragment>\r\n\r\n\t\t\t\t}\r\n\t\t\t\t`;\r\n\r\n\t\tconst uniforms = {\r\n\t\t\tmap: { value: texture },\r\n\t\t\theight: { value: options.height || 15 },\r\n\t\t\tradius: { value: options.radius || 100 },\r\n\t\t};\r\n\r\n\t\tconst geometry = new IcosahedronGeometry( 1, 16 );\r\n\t\tconst material = new ShaderMaterial( {\r\n\t\t\tuniforms,\r\n\t\t\tfragmentShader,\r\n\t\t\tvertexShader,\r\n\t\t\tside: DoubleSide,\r\n\t\t} );\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t}\r\n\r\n\tset radius( radius ) {\r\n\r\n\t\tthis.material.uniforms.radius.value = radius;\r\n\r\n\t}\r\n\r\n\tget radius() {\r\n\r\n\t\treturn this.material.uniforms.radius.value;\r\n\r\n\t}\r\n\r\n\tset height( height ) {\r\n\r\n\t\tthis.material.uniforms.height.value = height;\r\n\r\n\t}\r\n\r\n\tget height() {\r\n\r\n\t\treturn this.material.uniforms.height.value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { GroundProjectedSkybox };\r\n"],
  "mappings": ";;;;;;;;AAMA,IAAM,wBAAN,cAAoC,KAAK;AAAA,EAExC,YAAa,SAAS,UAAU,CAAC,GAAI;AAEpC,UAAM,YAAY,QAAQ;AAE1B,UAAM,UAAU;AAAA,MACf,YAAY,6BAA6B;AAAA,IAC1C;AAEA,UAAM;AAAA;AAAA,MAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYhC,UAAM,iBAAiB,QAAQ,KAAM,IAAK;AAAA,IAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmGzD,UAAM,WAAW;AAAA,MAChB,KAAK,EAAE,OAAO,QAAQ;AAAA,MACtB,QAAQ,EAAE,OAAO,QAAQ,UAAU,GAAG;AAAA,MACtC,QAAQ,EAAE,OAAO,QAAQ,UAAU,IAAI;AAAA,IACxC;AAEA,UAAM,WAAW,IAAI,oBAAqB,GAAG,EAAG;AAChD,UAAM,WAAW,IAAI,eAAgB;AAAA,MACpC;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM;AAAA,IACP,CAAE;AAEF,UAAO,UAAU,QAAS;AAAA,EAE3B;AAAA,EAEA,IAAI,OAAQ,QAAS;AAEpB,SAAK,SAAS,SAAS,OAAO,QAAQ;AAAA,EAEvC;AAAA,EAEA,IAAI,SAAS;AAEZ,WAAO,KAAK,SAAS,SAAS,OAAO;AAAA,EAEtC;AAAA,EAEA,IAAI,OAAQ,QAAS;AAEpB,SAAK,SAAS,SAAS,OAAO,QAAQ;AAAA,EAEvC;AAAA,EAEA,IAAI,SAAS;AAEZ,WAAO,KAAK,SAAS,SAAS,OAAO;AAAA,EAEtC;AAED;",
  "names": []
}
